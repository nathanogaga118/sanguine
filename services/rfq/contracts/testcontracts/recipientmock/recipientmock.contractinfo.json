{"solidity/RecipientMock.sol:IFastBridgeRecipient":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// contracts/interfaces/IFastBridgeRecipient.sol\n\ninterface IFastBridgeRecipient {\n    function fastBridgeTransferReceived(\n        address token,\n        uint256 amount,\n        bytes memory callParams\n    )\n        external\n        payable\n        returns (bytes4);\n}\n\n// test/mocks/RecipientMock.sol\n\n/// @notice Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\ncontract RecipientMock is IFastBridgeRecipient {\n    /// @notice Mock needs to accept ETH\n    receive() external payable {}\n\n    /// @notice Minimal viable implementation of the fastBridgeTransferReceived hook.\n    function fastBridgeTransferReceived(address, uint256, bytes memory) external payable returns (bytes4) {\n        return IFastBridgeRecipient.fastBridgeTransferReceived.selector;\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"callParams","type":"bytes"}],"name":"fastBridgeTransferReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"name\":\"fastBridgeTransferReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/RecipientMock.sol\":\"IFastBridgeRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/RecipientMock.sol\":{\"keccak256\":\"0xb8f940be952dc310c5d546785516c6d77f8abe7f6a852ee6ab4b3f1c33534b41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb32a814c5a9088d1881eec57e12c3ebe91503be5b6be1c0c212b46bdbca89a7\",\"dweb:/ipfs/QmTQFfCjLPqVsxw7B6c4CNZMbtKJrg6mctRsTwaXqVDeLe\"]}},\"version\":1}"},"hashes":{"fastBridgeTransferReceived(address,uint256,bytes)":"461e0c21"}},"solidity/RecipientMock.sol:RecipientMock":{"code":"0x608060405234801561001057600080fd5b50610202806100206000396000f3fe6080604052600436106100225760003560e01c8063461e0c211461002e57600080fd5b3661002957005b600080fd5b61006461003c3660046100c8565b7f461e0c21000000000000000000000000000000000000000000000000000000009392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156100dd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461010157600080fd5b925060208401359150604084013567ffffffffffffffff8082111561012557600080fd5b818601915086601f83011261013957600080fd5b81358181111561014b5761014b610099565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561019157610191610099565b816040528281528960208487010111156101aa57600080fd5b826020860160208301376000602084830101528095505050505050925092509256fea2646970667358221220f1a74d56eefc9976c67d52f3119adaca862e91740662087e97a8e47c248fbb1d64736f6c63430008140033","runtime-code":"0x6080604052600436106100225760003560e01c8063461e0c211461002e57600080fd5b3661002957005b600080fd5b61006461003c3660046100c8565b7f461e0c21000000000000000000000000000000000000000000000000000000009392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156100dd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461010157600080fd5b925060208401359150604084013567ffffffffffffffff8082111561012557600080fd5b818601915086601f83011261013957600080fd5b81358181111561014b5761014b610099565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561019157610191610099565b816040528281528960208487010111156101aa57600080fd5b826020860160208301376000602084830101528095505050505050925092509256fea2646970667358221220f1a74d56eefc9976c67d52f3119adaca862e91740662087e97a8e47c248fbb1d64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// contracts/interfaces/IFastBridgeRecipient.sol\n\ninterface IFastBridgeRecipient {\n    function fastBridgeTransferReceived(\n        address token,\n        uint256 amount,\n        bytes memory callParams\n    )\n        external\n        payable\n        returns (bytes4);\n}\n\n// test/mocks/RecipientMock.sol\n\n/// @notice Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\ncontract RecipientMock is IFastBridgeRecipient {\n    /// @notice Mock needs to accept ETH\n    receive() external payable {}\n\n    /// @notice Minimal viable implementation of the fastBridgeTransferReceived hook.\n    function fastBridgeTransferReceived(address, uint256, bytes memory) external payable returns (bytes4) {\n        return IFastBridgeRecipient.fastBridgeTransferReceived.selector;\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"436:399:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"436:399:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;651:182;;;;;;:::i;:::-;770:56;651:182;;;;;;;;;1627:66:1;1615:79;;;1597:98;;1585:2;1570:18;651:182:0;;;;;;;14:184:1;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:1245;289:6;297;305;358:2;346:9;337:7;333:23;329:32;326:52;;;374:1;371;364:12;326:52;413:9;400:23;463:42;456:5;452:54;445:5;442:65;432:93;;521:1;518;511:12;432:93;544:5;-1:-1:-1;596:2:1;581:18;;568:32;;-1:-1:-1;651:2:1;636:18;;623:32;674:18;704:14;;;701:34;;;731:1;728;721:12;701:34;769:6;758:9;754:22;744:32;;814:7;807:4;803:2;799:13;795:27;785:55;;836:1;833;826:12;785:55;872:2;859:16;894:2;890;887:10;884:36;;;900:18;;:::i;:::-;1034:2;1028:9;1096:4;1088:13;;939:66;1084:22;;;1108:2;1080:31;1076:40;1064:53;;;1132:18;;;1152:22;;;1129:46;1126:72;;;1178:18;;:::i;:::-;1218:10;1214:2;1207:22;1253:2;1245:6;1238:18;1293:7;1288:2;1283;1279;1275:11;1271:20;1268:33;1265:53;;;1314:1;1311;1304:12;1265:53;1370:2;1365;1361;1357:11;1352:2;1344:6;1340:15;1327:46;1415:1;1410:2;1405;1397:6;1393:15;1389:24;1382:35;1436:6;1426:16;;;;;;;203:1245;;;;;:::o","abiDefinition":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"fastBridgeTransferReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"userDoc":{"kind":"user","methods":{"fastBridgeTransferReceived(address,uint256,bytes)":{"notice":"Minimal viable implementation of the fastBridgeTransferReceived hook."}},"notice":"Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"fastBridgeTransferReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fastBridgeTransferReceived(address,uint256,bytes)\":{\"notice\":\"Minimal viable implementation of the fastBridgeTransferReceived hook.\"}},\"notice\":\"Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/RecipientMock.sol\":\"RecipientMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/RecipientMock.sol\":{\"keccak256\":\"0xb8f940be952dc310c5d546785516c6d77f8abe7f6a852ee6ab4b3f1c33534b41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb32a814c5a9088d1881eec57e12c3ebe91503be5b6be1c0c212b46bdbca89a7\",\"dweb:/ipfs/QmTQFfCjLPqVsxw7B6c4CNZMbtKJrg6mctRsTwaXqVDeLe\"]}},\"version\":1}"},"hashes":{"fastBridgeTransferReceived(address,uint256,bytes)":"461e0c21"}}}